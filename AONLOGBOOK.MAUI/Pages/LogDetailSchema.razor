@inject IHttpService httpservice
@using AONLOGBOOK.SHARED.CModels;
@if (Displayform==true)
{
   <Modal></Modal>

}else
{
    <Card Margin="Margin.Is4.OnY">
                <CardHeader>Logbook Entry</CardHeader>
                 <CardBody>
                  <EditForm Model="@logdt">
                             <Fields>
                                 <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                                     <FieldLabel>Element</FieldLabel>
                        <Select @bind-SelectedValue="logmddt.Element">
                                @*<Select SelectedValue="@logdt.Element" TValue="int?" SelectedValueExpression="@(()=>logdt.Element)" 
                                SelectedValueChanged="@((args)=>{handleUOM(args);})">*@
                                <SelectItem>--Select--</SelectItem>
                                    @if (tagmst != null)
                                    {
                                        @foreach (TblTagMaster tag in tagmst)
                                        {
                                            <SelectItem Value="@tag.ID">@tag.Tag_Name</SelectItem>
                                        }
                                    }
                                </Select>
                                 </Field>
                                  <Field ColumnSize="ColumnSize.Is4">
                                       <FieldLabel>Source</FieldLabel>
                        <Select SelectedValue="logmddt.Source" SelectedValueChanged="@((string a)=>{handlesrc(a);})" TValue="string" SelectedValueExpression="@(()=>logmddt.Source)">
                                            <SelectItem >--Select--</SelectItem>
                                            <SelectItem Value=@("Manual")>Manual</SelectItem>
                                            <SelectItem Value=@("Calculated")>Calculated</SelectItem>
                                            <SelectItem Value=@("Automatic")>Automatic</SelectItem>
                                    </Select>
                                   </Field>
                    @if (cal == false)
                    {
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>Type</FieldLabel>
                            <Select TValue="string" SelectedValue="logmddt.DataType" SelectedValueChanged="@((string a)=>{handleType(a);})" SelectedValueExpression="@(()=>logmddt.DataType)">
                                <SelectItem>--Select--</SelectItem>
                                <SelectItem Value=@("Text")>Text</SelectItem>
                                <SelectItem Value=@("Number")>Number</SelectItem>
                                <SelectItem Value=@("DateTime")>DateTime</SelectItem>
                                <SelectItem Value=@("Date")>Date</SelectItem>
                                <SelectItem Value=@("Time")>Time</SelectItem>
                                <SelectItem Value=@("Choice")>Choice</SelectItem>
                                <SelectItem Value=@("Boolean")>Boolean</SelectItem>
                                <SelectItem Value=@("Lookup")>Lookup</SelectItem>

                            </Select>
                        </Field>
                                   }
                  @if(lookup == false){
                    <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                         <FieldLabel>Lookup List</FieldLabel>
                         <Select SelectedValue="@logmddt.LookupId" SelectedValueChanged="@((string arg)=>{handlelookuplist(arg);})"
                             SelectedValueExpression="@(()=>logmddt.LogbookId)">
                       <SelectItem>--Select--</SelectItem>
                                @if(logbooklist != null)
                                {
                                    @foreach (TblLogbookMaster item in logbooklist)
                                    {
                                    <SelectItem Value="@item.LogbookId">@item.LogbookName</SelectItem>
                       }
                                }
                              
                         </Select>
                    </Field>
                      }
                    @if(lookitem == false)
                    {
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>Text Field</FieldLabel>
                            <Select SelectedValue="@logmddt.Text_Schema" SelectedValueChanged="@((string arg)=>{handletext(arg);})"
                                SelectedValueExpression="@(()=>logmddt.Text_Schema)">
                                <SelectItem>--Select--</SelectItem>
                                @if (logdetailss != null)
                                {
                                    @foreach (TblLogbookDetailSchemaMOD item in logdetailss)
                                    {
                                        <SelectItem Value="@item.Id">@item.Display_Name</SelectItem>
                                    }
                                }

                            </Select>
                        </Field>
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>Value Field</FieldLabel>
                            <Select SelectedValue="@logmddt.Value_Schema" SelectedValueChanged="@((string arg)=>{handlevalue(arg);})"
                                SelectedValueExpression="@(()=>logmddt.Value_Schema)">
                                <SelectItem>--Select--</SelectItem>
                                @if (logdetailss != null)
                                {
                                    @foreach (TblLogbookDetailSchemaMOD item in logdetailss)
                                    {
                                        <SelectItem Value="@item.Id">@item.Display_Name</SelectItem>
                                    }
                                }

                            </Select>
                        </Field>
                    }
                   
                       </Fields>
                               <Fields>
                                   @if(dislmin == false){
                    <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                        <FieldLabel>UOM</FieldLabel>
                            <Select @bind-SelectedValue="logmddt.UOM">
                            <SelectItem>--Select--</SelectItem>
                            @if (uommst != null)
                            {
                                @foreach (TblUommaster umm in uommst)
                                {
                                    <SelectItem Value="@umm.Id">@umm.Unit</SelectItem>
                                }
                            }
                        </Select>
                    </Field>   }
                    @if(dislmin == false || txt == false){
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>L_Min</FieldLabel>
                            <NumericEdit @bind-Value="logmddt.L_Min"></NumericEdit>
                        </Field>
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>L_Max</FieldLabel>
                            <NumericEdit @bind-Value="logmddt.L_Max"></NumericEdit>
                        </Field>

                    }
                              
                               </Fields>
                            <Fields>
                    @if (dislmin == false)
                    {
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>Prscn</FieldLabel>
                            <NumericEdit @bind-Value="logmddt.Prscn"></NumericEdit>
                        </Field>
                                }
                                
                               @* <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                                    <FieldLabel>Calculation Param</FieldLabel>
                                    <NumericEdit @bind-Value="logdt.CalulationParams"></NumericEdit>
                                </Field>
                                <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                                    <FieldLabel>Operator</FieldLabel>
                                <TextEdit @bind-Value="logdt.Operator"></TextEdit>
                                </Field>*@
                       
                            </Fields>
                            <Fields>
                              @*  <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                                    <FieldLabel>RefCol</FieldLabel>
                                    <TextEdit @bind-Value="logdt.RefCol"></TextEdit>
                                </Field>*@
                        @if(cal == false){
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <Check TValue="bool" Checked="@ismandatory" CheckedChanged="@Oncheckedchange">IsMandatory</Check>
                        </Field>
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <Check TValue="bool" Checked="@isother" CheckedChanged="@OnOthercheckedchange">IsOther</Check>
                        </Field>
                        }
                  
                               
                            </Fields>
                       
                        <Field Flex="Flex.JustifyContent.End.OnDesktop.JustifyContent.Center.OnMobile">
                            @ChildContent
                            <Button Clicked="Savedetails" Color="Color.Info" Disabled="busy">@(isnew==true?"Submit":"Update")</Button>
                       </Field>



                    </EditForm>

                 </CardBody>
            </Card>


             <div class="card" style="overflow:auto;">
                <table class="table table-scroll table-striped" style="overflow:auto; height:250px; font-size:12px;">
                    <thead class="thead-dark" style="position:sticky;top:0;z-index:1">
                        <tr>
                            <th>Tagname</th>
                            @*<th>UOM</th>*@
                            <th>Data type</th>
                            <th>Source</th>
                            <th>L_Min</th>
                            <th>L_Max</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                @if (logdetail != null)
                {
                    @foreach (var item in logdetail)
                    {
                          <tr>
                           @* @if (item.DataType == "Lookup")
                            {
                                <td>@item.LogbookName</td>
                                 <td>@item.DataType</td>
                                  <td>@item.Source</td>
                                  <td>@item.L_Min</td>
                                  <td>@item.L_Max</td>
                                  <td> <Dropdown Disabled="@(item.DataType == "Lookup")">
                                            <Button Color="Color.Info">Action</Button>
                                            <DropdownToggle Color="Color.Primary" Split />
                                            <DropdownMenu>
                                                <DropdownItem Clicked="@(()=>HandleEditLogDetail(item))">Edit</DropdownItem>
                                                <DropdownDivider />
                                                <DropdownItem Clicked="@(()=>handalDelLogDetail(item))">Delete</DropdownItem>

                                            </DropdownMenu>
                                        </Dropdown></td>
                            }else{*@
                                 <td>@item.Display_Name</td>
                                 @* <td>@item.Unit</td>*@
                                   <td>@item.DataType</td>
                                  <td>@item.Source</td>
                                  <td>@item.L_Min</td>
                                  <td>@item.L_Max</td>
                                  <td> <Dropdown>
                                            <Button Color="Color.Info">Action</Button>
                                            <DropdownToggle Color="Color.Primary" Split />
                                            <DropdownMenu>
                                        <DropdownItem Clicked="@(()=>HandleEditLogDetail(item))" Disabled="@(item.DataType == "Lookup")">Edit</DropdownItem>
                                                <DropdownDivider />
                                                <DropdownItem Clicked="@(()=>handalDelLogDetail(item))">Delete</DropdownItem>

                                            </DropdownMenu>
                                        </Dropdown></td>
                            @*}*@
                                 
                              </tr>

                    }
                }

                    </tbody>
                </table>
            </div> 
}

@code {
    Modal logref { get; set; }
    [Parameter]
    public TblLogbookMaster log{ get; set; }
    public string Dept{ get; set; }
    public string SDept{ get; set; }
    bool ismandatory;
    bool isother;
    bool? Displayform { get; set; } = false;
    bool? dislmin { get; set; } = true;
    bool? txt { get; set; } = true;
    bool? lookup { get; set; } = true;
    bool? lookitem { get; set; } = true;
    Formdata datas = new();
    TblLogbookDetailSchema logdt = new();
    TblLogbookDetailSchemasMD logmddt = new();
    IEnumerable<TblLogbookDetailSchemasMD> logdetail;
    IEnumerable<TblLogbookDetailSchemaMOD> logdetailss;
    IEnumerable<TblLogbookDetailSchema> logdetails;
    IEnumerable<TblTagMaster> tagmst;
    IEnumerable<TblUommaster> uommst;
    IEnumerable<TblLookup> lookuplist;
    IEnumerable<TblLogbookMaster> logbooklist;
    TblTagMaster tag;
    TblUommaster uom;
    bool isnew = true;
    bool? cal { get; set; } = true;
    bool busy = false;
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<bool> mstlogChanged { get; set; }
    string logbook;
    protected override async Task OnInitializedAsync()
    {

        datas.Department = log.Department;
        datas.SubDepartment = log.SubDepartment;
        datas.logbook = log.LogbookId.ToString();
        tagmst = await httpservice.Get<List<TblTagMaster>>("TagMasters/ACT");
        uommst = await httpservice.Get<List<TblUommaster>>("Uommasters/ACT");
        logdetail = await httpservice.Get<List<TblLogbookDetailSchemasMD>>("LogbookDetailSchemas/ACT/" + datas.logbook);
        StateHasChanged();

    }
    //async void handleUOM(object value)
    //{
    //    logdt.Element = (int)value;
    //    tag = (await httpservice.Get<List<TblTagMaster>>("TagMasters/")).First(a => (a.Id == logdt.Element));
    //    uommst = (await httpservice.Get<List<TblUommaster>>("Uommasters/")).Where(a => (a.Id == tag.Uom));
    //    (logdt.Uom) = Convert.ToInt32(uommst.First().Id);
    //    StateHasChanged();
    //}

    async void Savedetails()
    {
        if(isnew==true)
        {
            try
            {
                busy = true;
                logmddt.CreatedBy = "Admin";
                logmddt.LogbookId = datas.logbook;
                logmddt.isMandatory = Convert.ToInt16(ismandatory);
                logmddt.isOther = Convert.ToInt16(isother);
                var savedata = await httpservice.Post<string>("LogbookDetailSchemas", logmddt);
                if (savedata != null)
                {
                    await App.Current.MainPage.DisplayAlert("Message", savedata, "ok");
                    busy = false;
                }
                else
                {
                    await App.Current.MainPage.DisplayAlert("Message", "Error", "ok");
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await App.Current.MainPage.DisplayAlert("Message", "Error", "ok");
            }
            logdetail = await httpservice.Get<List<TblLogbookDetailSchemasMD>>("LogbookDetailSchemas/ACT/" + datas.logbook);
            logmddt = new();

            StateHasChanged();
        }
        else
        {
            try
            {
                busy = true;
                logmddt.UpdatedBy = "Admin";
                logmddt.LogbookId = datas.logbook;
                logmddt.isMandatory = Convert.ToInt16(ismandatory);
                logmddt.isOther = Convert.ToInt16(isother);
                logmddt.Del_Flag = 0;
                var savedata = await httpservice.Post<string>("LogbookDetailSchemas/UPD", logmddt);
                if (savedata != null)
                {
                    await App.Current.MainPage.DisplayAlert("Message", savedata, "ok");
                     busy =false;
                }
                else
                {
                    await App.Current.MainPage.DisplayAlert("Message", "Error", "ok");
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {

            }
            logdetail = await httpservice.Get<List<TblLogbookDetailSchemasMD>>("LogbookDetailSchemas/ACT/" + datas.logbook);
            logmddt = new();
            busy = false;
            StateHasChanged();
            isnew = true;

        }

    }
    async void submit()
    {

        logdetail = await httpservice.Get<List<TblLogbookDetailSchemasMD>>("LogbookDetailSchemas/ACT/" + datas.logbook);
        Displayform = true;
        StateHasChanged();
    }
    //void handleSource(string arg)
    //{
    //    if(arg == "Calculated")
    //    {
    //        Displayform = true;

    //    }
    //}    
    async void  handalDelLogDetail(TblLogbookDetailSchemasMD item)
    {
        item.Del_Flag= 1;
        var result = await httpservice.Post<string>("LogbookDetailSchemas/UPD", item);

        if (result != null)
        {
            await App.Current.MainPage.DisplayAlert("Message", "Schema Deleted Successfully", "Ok");
            
        }
        else
        {

            await App.Current.MainPage.DisplayAlert("Message", "Error", "Ok");

        }

        StateHasChanged();
         logdetail = await httpservice.Get<List<TblLogbookDetailSchemasMD>>("LogbookDetailSchemas/ACT/" + datas.logbook);
        await OnInitializedAsync();
        isnew = true;

    }
    void handleDatas()
    {
        Displayform = true;
    }

    async void handleType(string val)
    {
        logmddt.DataType = val;
        if (logmddt.DataType == "Number")
        {
            dislmin = false;
            StateHasChanged();
        }
        else
        {
            dislmin = true;
        }
        if (logmddt.DataType == "Text")
        {
            txt = false;
            StateHasChanged();
        }else{
            txt = true;
        }
        if(logmddt.DataType == "Lookup")
        {
            lookup = false;
            //logbooklist= (await httpservice.Get<List<TblLogbookMaster>>("LogbookMasters/ACT")).Where(a=>(a.Company_Id == log.Company_Id && a.PlantCode == log.PlantCode));
            logbooklist = (await httpservice.Get<List<TblLogbookMaster>>("LogbookMasters/ACT")).Where(a => (a.IsLookup == 1));
            StateHasChanged();

        }else{
            lookup = true;
        }
        lookitem = true;
        logmddt.LookupId = null;
        logmddt.L_Max = null;
        logmddt.L_Min = null;
        logmddt.Text_Schema = null;
        logmddt.Value_Schema = null;
        StateHasChanged();
    }
    void handlesrc(string val)
    {
        logmddt.Source = val;
        if (logmddt.Source == "Calculated")
        {
            cal = true;
            StateHasChanged();
        }
        else
        {
            cal = false;
        }

    }
    void Oncheckedchange(bool value)
    {
        ismandatory = value;
    }
    void OnOthercheckedchange(bool value)
    {
        isother = value;
    }
    async void HandleEditLogDetail(TblLogbookDetailSchemasMD item)
    {
        logmddt = item;
        isnew = false;
        if (logmddt.DataType == "Number")
        {
            dislmin = false;
            StateHasChanged();
        }
        else
        {
            dislmin = true;
        }
        if (logmddt.DataType == "Text")
        {
            txt = false;
            lookitem = true;
            StateHasChanged();
        }
        else
        {
            txt = true;

        }
        if (logmddt.DataType == "Lookup")
        {
            lookup = false;
            logbooklist = (await httpservice.Get<List<TblLogbookMaster>>("LogbookMasters/ACT")).Where(a => (a.IsLookup == 1));
            StateHasChanged();
            logbooklist = null; 
        }
        else
        {
            lookup = true;
        }
        if (logmddt.Source == "Calculated")
        {
            cal = true;
            StateHasChanged();
        }
        else
        {
            cal = false;
        }
    }
    async void handlelookuplist(string value)
    {


        logmddt.LookupId =value;
        if(logmddt.LookupId != null){
            lookitem = false;
            logdetailss = await httpservice.Get<List<TblLogbookDetailSchemaMOD>>("LogbookDetailSchemas/ACT/" + logmddt.LookupId);
            StateHasChanged();
            
        }
        else
        {
            lookitem = true;
        }

    }
    void handlevalue(string val){
        logmddt.Value_Schema = val;
        StateHasChanged();
    }
     void handletext(string val){
         logmddt.Text_Schema = val;
        StateHasChanged();
    }

}
