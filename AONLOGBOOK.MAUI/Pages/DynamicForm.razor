@page "/DynamicForm"
@using AONLOGBOOK.SHARED.Models;
@using AONLOGBOOK.SHARED.CModels;
@using AONLOGBOOK.MAUI.Models;
@using System.Data;
@inject IHttpService httpservices

<style>
    body {
        background: #F6F5F5;
    }

    .Card {
        border: 1px solid #1616424a;
        border-radius: 15px;
        box-shadow: 0px 0px 2px 2px #bdcfdd;
       
        transition:ease-in-out 5s;
    }

    details 
    {
        margin-bottom: 18px;
    }

    details summary 
    {
       font-size: 13px;
       cursor: pointer;
    }

    details p {
      font-size: 13px;
       line-height: 24px;
       margin-top: 10px;
            color: #545d7a;
        }
</style>

<Div Class="container p-2">
@*    <Heading Size="HeadingSize.Is4" Flex="Flex.JustifyContent.Center" Margin="Margin.Is4">LOGBOOK</Heading>
*@   

  <Accordion>
    <Collapse Visible="@collapse1Visible">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is6">
                    <AccordionToggle><BarIcon IconName="IconName.Book" TextColor="TextColor.Secondary" Margin="Margin.Is2"></BarIcon><Badge Color="Color.Info"> LOGBOOK</Badge></AccordionToggle>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            <EditForm Model="@formdatas" OnValidSubmit="Submit">

                <Validations @ref="validations" Mode="ValidationMode.Manual">
                    <Fields>

                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>Department</FieldLabel>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <Select SelectedValue="@formdatas.Department" SelectedValueExpression="@(()=>formdatas.Department)" SelectedValueChanged="@((string args)=>{handleformgroup(args);})">
                                    <SelectItem>--Select--</SelectItem>
                                    @if (departments != null)
                                    {
                                        @foreach (TblDeptMaster dept in departments)
                                        {
                                            <SelectItem Value="@dept.Id">@dept.Dept_Name</SelectItem>
                                        }
                                    }

                                </Select>
                            </Validation>
                        </Field>
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>SubDepartment</FieldLabel>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <Select SelectedValue="@formdatas.SubDepartment" SelectedValueExpression="@(()=>formdatas.SubDepartment)" SelectedValueChanged="@((string agrs)=>{handleforms(agrs);})">
                                    <SelectItem>--Select--</SelectItem>
                                    @if (subDepts != null)
                                    {
                                        @foreach (TblSubDeptMaster sub in subDepts)
                                        {
                                            <SelectItem Value="@sub.Id">@sub.SubDpt_Name</SelectItem>
                                        }
                                    }
                                </Select>
                            </Validation>
                        </Field>
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>Logbook</FieldLabel>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <Select SelectedValue="@formdatas.logbook" SelectedValueExpression="@(()=>formdatas.logbook)" SelectedValueChanged="@((string args)=>{handlelog(args);})">
                                    <SelectItem>--Select--</SelectItem>
                                    @if (logbooks != null)
                                    {
                                        @foreach (LogbookMaster log in logbooks)
                                        {
                                            <SelectItem Value="@log.LogbookId">@log.LogbookName</SelectItem>
                                        }
                                    }

                                </Select>
                            </Validation>
                        </Field>
                            <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                                <FieldLabel>Date</FieldLabel>
                               @* <Validation Validator="ValidationRule.">*@
                                <DateEdit Date="@CurrentDate" TValue="DateTime?" InputMode="DateInputMode.DateTime" DateChanged="@handleshift"/>
                                @*</Validation>*@
                            </Field>
                          
                            <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                                <FieldLabel>Shift</FieldLabel>
                                <Validation Validator="ValidationRule.IsNotEmpty">
                                   <Select @bind-SelectedValue="formdatas.Shift" TValue="string">
                                       <SelectItem>--Select--</SelectItem>
                                       @if(shiftdata!=null)
                                        {
                                            @foreach (TblShiftMaster shift in shiftdata)
                                            {
                                                <SelectItem Value="@shift.Id">@shift.Shift_prefix</SelectItem>
                                            }
                                        }
                                   </Select>
                                </Validation>
                            </Field>
                        
                    </Fields>
                        <Field Flex="Flex.JustifyContent.End.OnDesktop.JustifyContent.Center.OnMobile">
                            <Button Clicked="Submit" style="margin-top:10px;background:#659abb;color:#000;" Disabled=@(formdatas.Department==null||formdatas.SubDepartment==null||formdatas.logbook==null)>Generate Form</Button>
                        </Field>
                </Validations>
            </EditForm>
        </CollapseBody>
    </Collapse>
</Accordion>
    <Divider DividerType="DividerType.Dashed" />
   @if(Displaydynamic==true)
    {
        
    @if (dynamicform.Count()>=0)
    {
@*       <Validations @ref="validations" Mode="ValidationMode.Manual">
*@          <Card Margin="Margin.Is4.OnY" Background="Background.Transparent" Class="Card">
              <CardHeader Style="background:linear-gradient(180deg, rgb(170 196 224 / 50%), transparent); color:#11324D;border-radius:15px;">
                <Heading Size="HeadingSize.Is4"><Badge Color="Color.Info">@logbooks.First(a=>(a.LogbookId.ToString()==formdatas.logbook)).LogbookName</Badge></Heading>
              </CardHeader>
                <CardBody>
                    <CardText>
                        <EditForm Model="@dynamicform">
                        <Field>
                            @foreach (ElementList ele in dynamicform)
                            {
                               
                                @if (ele.ElementType == "Text")
                                {
                                    <FieldLabel Style="font-weight:600;">@ele.Label</FieldLabel>
                                    @if(ele.Label=="Email")
                                    {
                                        @if(ele.IsMandatory==1)
                                        {
                                        <Validations @ref="validations" Mode="ValidationMode.Manual">
                                            <Validation Validator="ValidateEmail">
                                                <TextEdit @bind-Text="@ele.StringValue" Style="margin:auto;" InputMode="TextInputMode.Email"></TextEdit>
                                           <Feedback>
                                            
                                            <ValidationError>Enter valid email!</ValidationError>
                                           </Feedback>
                                            </Validation>
                                        </Validations>
                                        }
                                        else
                                        {
                                            <TextEdit @bind-Text="@ele.StringValue" Style="margin:auto;" InputMode="TextInputMode.Email"></TextEdit>
                                        }
                                    }else
                                    {
                                        @if (ele.IsMandatory == 1)
                                        {
                                            <Validations @ref="validations" Mode="ValidationMode.Manual">
                                            <Validation Validator="ValidationRule.IsNotEmpty">
                                                <TextEdit @bind-Text="@ele.StringValue" Style="margin:auto;"></TextEdit>
                                                <Feedback>
                                                    <ValidationError>Required @ele.Label</ValidationError>
                                                </Feedback>
                                            </Validation>
                                            </Validations>
                                        }
                                        else
                                        {
                                            <TextEdit @bind-Text="@ele.StringValue" Style="margin:auto;"></TextEdit>
                                        }
                                    }

                                }
                                else if (ele.ElementType == "Number")
                                {
                                    <FieldLabel Style="font-weight:600;">@ele.Label</FieldLabel>
                                    @if (ele.IsMandatory == 1)
                                    {
                                        <Validations @ref="validations" Mode="ValidationMode.Manual">
                                        <Validation Validator="ValidationRule.None">
                                            <NumericEdit @bind-Value="ele.IntegerValue" Style="margin:auto;"></NumericEdit>
                                            <Feedback>
                                                    <ValidationError>Required @ele.Label</ValidationError>
                                                </Feedback>
                                        </Validation>
                                        </Validations>
                                    }
                                    else
                                    {
                                        <NumericEdit @bind-Value="ele.IntegerValue" Style="margin:auto;"></NumericEdit>
                                    }
                                }else if (ele.ElementType == "Lookup")
                                {
                                    if(ele.LookupValue!=null)
                                    {
                                      <FieldLabel Style="font-weight:600;">@ele.Label</FieldLabel>
                                    @*@if (ele.IsMandatory == 1)
                                    {*@
                                        @if(ele.isOther == 1)
                                        {
                                            <Validations @ref="validations" Mode="ValidationMode.Manual">
                                        <Validation Validator="ValidationRule.None">
                                         
                                              <Select SelectedValue="@ele.LookupValue" SelectedValueChanged="@((string arg)=>{handlevalue(arg);})"
                                                  SelectedValueExpression="@(()=>ele.LookupValue)">
                                                 <SelectItem>--select--</SelectItem>
                                                    @foreach(LookupData item in ele.lookuplist)
                                                    { 
                                                    <SelectItem Value="@item.value">@item.text</SelectItem>
                                                    }
                                                    <SelectItem Value="@("Other")">Other</SelectItem>
                                                </Select>
                                                @if(iscorrect == false){
                                                 <TextEdit @bind-Text="@ele.StringValue" Style="margin:auto;"></TextEdit>
                                                        }
                                                    </Validation>
                                                </Validations>
                                        }else{<Validations @ref="validations" Mode="ValidationMode.Manual">
                                        <Validation Validator="ValidationRule.None">
                                         
                                              <Select @bind-SelectedValue="ele.LookupValue">
                                                 <SelectItem>--select--</SelectItem>
                                                    @foreach(LookupData item in ele.lookuplist)
                                                    { 
                                                    <SelectItem Value="@item.value">@item.text</SelectItem>
                                                    }
                                                   
                                                </Select>
                                                    </Validation>
                                                </Validations>

                                        }
                                        
                                                    
                                                   

                                        
                                   @* }*@
                                    }
                                   
                                  }
                                else if (ele.ElementType == "Date")
                                {
                                    <FieldLabel Style="font-weight:600;">@ele.Label</FieldLabel>
                                    @if (ele.IsMandatory == 1)
                                    {
                                        <Validations @ref="validations" Mode="ValidationMode.Manual">
                                            <Validation Validator="ValidationRule.IsNotEmpty">
                                                <DateEdit @bind-Date="ele.DateOnlyValue"></DateEdit>
                                            </Validation>
                                        </Validations>
                                    }
                                    else
                                    {
                                        <DateEdit @bind-Date="ele.DateOnlyValue" InputMode="DateInputMode.Date"></DateEdit>
                                    }
                                }
                                else if (ele.ElementType == "Time")
                                {
                                    <FieldLabel Style="font-weight:600;">@ele.Label</FieldLabel>
                                    @if (ele.IsMandatory == 1)
                                    {
                                        <Validations @ref="validations" Mode="ValidationMode.Manual">
                                            <Validation Validator="ValidationRule.IsNotEmpty">
                                                <TimeEdit @bind-Time="ele.TimeValue" TValue="DateTime?"></TimeEdit>
                                                 <Feedback>
                                                    <ValidationError>Required @ele.Label</ValidationError>
                                                </Feedback>
                                            </Validation>
                                        </Validations>
                                    }
                                    else
                                    {
                                       <TimeEdit @bind-Time="ele.TimeValue" TValue="DateTime?"></TimeEdit>
                                    }
                                }
                                else if (ele.ElementType == "DateTime")
                                {
                                    <FieldLabel Style="font-weight:600;">@ele.Label</FieldLabel>
                                     @if (ele.IsMandatory == 1)
                                    { <Validations @ref="validations" Mode="ValidationMode.Manual">
                                        <Validation Validator="ValidationRule.None">
                                            <DateEdit @bind-Date="ele.DateValue" Style="margin:auto;"></DateEdit>
                                             <Feedback>
                                                    <ValidationError>Required @ele.Label</ValidationError>
                                                </Feedback>
                                        </Validation>
                                        </Validations>
                                    }
                                    else
                                    {
                                        <DateEdit @bind-Date="ele.DateValue" Style="margin:auto;"></DateEdit>
                                    }
                                }
                                else if (ele.ElementType == "Boolean")
                                  {

                                   <FieldLabel Style="font-weight:600;">@ele.Label</FieldLabel>
                                    @if (ele.IsMandatory == 1)
                                    {
                                        @*<Validations @ref="validations" Mode="ValidationMode.Manual">
                                        <Validation Validator="ValidationRule.IsChecked">*@
                                           @* <RadioGroup TValue="string" Name="Rgrp" CheckedValue="@checkdynamicbool" CheckedValueChanged="@Onchecked">
                                            <Radio Group="Rgrp">Yes</Radio>
                                            <Radio Group="Rgrp">No</Radio>
                                        </RadioGroup>*@
                                                    <Field>
                                                        <InputRadioGroup @bind-Value="@ele.StringValue">
                                                            <InputRadio Value="@("Yes")" />Yes
                                                            <InputRadio Value="@("No")" />No<br />
                                                        </InputRadioGroup>
                                                    </Field>
                                           @*  <Feedback>
                                                    <ValidationError>Required @ele.Label</ValidationError>
                                                </Feedback>
                                        </Validation>
                                        </Validations>*@
                                    }
                                    else
                                    {
                                        <Field>
                                            <InputRadioGroup @bind-Value="@ele.StringValue">
                                                <InputRadio Value="@("Yes")"/>Yes
                                                <InputRadio Value="@("No")"/>No<br/>
                                            </InputRadioGroup>
                                        </Field>
                                       @* <RadioGroup TValue="string" Name="Rgrp" CheckedValue="@checkdynamicbool" CheckedValueChanged="@Onchecked">
                                            <Radio  Group="Rgrp">Yes</Radio>
                                            <Radio  Group="Rgrp">No</Radio>
                                        </RadioGroup>*@
                                    }
                                }

                        }
                            <Field Flex="Flex.JustifyContent.End.OnDesktop.JustifyContent.Center.OnMobile">
                                <Button Clicked="@submit" Style="justify-content:center; margin:15px;background:#659abb;color:#000;" Disabled="@(inactive)">Save</Button>
                                <Button Clicked="@savedraft" Style="justify-content:center; margin:15px;background:#659abb;color:#000;" Disabled="@(inactive)">Save Draft</Button>
                            </Field>

                        </Field>
                        </EditForm>
                    </CardText>

                </CardBody>
            </Card>
     
       @* </Validations>*@
    }
    }
    <Card>
        <CardBody>
            <CardTitle>
                <Badge Color="Color.Info">Report</Badge>
            </CardTitle>
            <CardBody>
           
              @if(datareport!=null)
                {
                    <Div Display="Display.Block.None.OnDesktop" >
                    @foreach (var item in dts)
                    {
                                <div id="accordion">
                                    <div class="faq-container m-2 ">
                                    <div class="card w-100" style="border-top: 1px solid #FF6E31;">
                                         <details class="d-flex m-2">
                                            <summary style="margin-left:10px; font-size:15px;" >
                                                <BarIcon IconName="IconName.Clock" TextColor="TextColor.Secondary"></BarIcon>  <b>Date: @formdatas.Date?.ToString("dd.MM.yyyy")</b>
                                            <Badge Style="background-color:#dfc647; font-size:14px;" Padding="Padding.Is2">
                                                Shift - @item.Rows[0]["Shift_prefix"]
                                                  </Badge>
                                            </summary>
                                                <p style="margin-left:5px;"> 
                                               
                                                     @foreach (DataRow row in item.Rows)
                                                    {
                                                        <ListGroup>
                                                        @foreach (DataColumn col in item.Columns)
                                                        {
                                                            @if (col.ColumnName != "shift_prefix" && col.ColumnName!="header_Id" && col.ColumnName!="status_F" )
                                                            {
                                                                <ListGroupItem>
                                                                    <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">

                                                                        <b>

                                                                            @col.ColumnName.ToString().ToUpper()

                                                                        </b><span> @row[col.ColumnName.ToString().ToUpper()]</span>

                                                                    </Div>
                                                                </ListGroupItem>
                                                            }

                                                        }
                                                   
                                                        <Field Flex="Flex.JustifyContent.Start" Margin="Margin.Is2" Padding="Padding.Is2">
                                                            <Dropdown>
                                                                <Button Color="Color.Primary">Action</Button>
                                                                <DropdownToggle Color="Color.Primary" Split />
                                                                <DropdownMenu>
                                                                    <DropdownItem Clicked="@(()=>handleitem(row))" Disabled="@(Convert.ToInt32(row["status_F"])==0)">Edit</DropdownItem>
                                                                    <DropdownDivider />
                                                                    <DropdownItem>Delete</DropdownItem>
                                                                    <DropdownDivider/>
                                                                    <DropdownItem>Save</DropdownItem>
                                                                </DropdownMenu>
                                                            </Dropdown>
                                                        </Field>
                                                        </ListGroup>
                                                    }
                                                 </p>   
                                            </details>
                                       
                                    </div>
                                </div>
                            </div>
                   
                        }
                    </Div>
                }
                    
                 
                    <Div Display="Display.None.Block.OnDesktop">
                    @if (dts.Count()>0)
                    {
                        <Table>
                            <TableHeader>
                               
                                 <TableRow>  
                                  @foreach (DataColumn col in dts.First().Columns)
                                {
                                    
                                            @if (col.ColumnName != "shift_prefix" && col.ColumnName != "header_Id" && col.ColumnName != "status_F")
                                            {
                                                <TableHeaderCell>@col.ColumnName.ToString().ToUpper()</TableHeaderCell>
                                            }
                                     
                               
                                }
                                   
                                 </TableRow>
                            </TableHeader>
                            <TableBody>
                                @foreach (var item in dts)
                                {
                                    <TableRowGroup Title="@("Shift "+ @item.Rows[0]["Shift_prefix"].ToString())">
                                    
                                        @foreach (DataRow row in item.Rows)
                                        {
                                            <TableRow>
                                                @foreach (DataColumn col in item.Columns)
                                                {
                                                    @if (col.ColumnName != "shift_prefix" && col.ColumnName != "header_Id" && col.ColumnName != "status_F")
                                                    {
                                                        <TableRowCell>@row[col.ColumnName.ToString().ToUpper()]</TableRowCell>
                                                    }
                                                }
                                                <TableRowCell>
                                                    <Dropdown>
                                                        <Button Color="Color.Primary">Action</Button>
                                                        <DropdownToggle Color="Color.Primary" Split />
                                                        <DropdownMenu>
                                                            <DropdownItem Clicked="@(()=>handleitem(row))" Disabled="@(Convert.ToInt32(row["status_F"])==0)">Edit</DropdownItem>
                                                            <DropdownDivider />
                                                            <DropdownItem>Delete</DropdownItem>
                                                            <DropdownDivider />
                                                            <DropdownItem>Save</DropdownItem>
                                                        </DropdownMenu>
                                                    </Dropdown>
                                                </TableRowCell>

                                            </TableRow>
                                        }
                                    </TableRowGroup>
                                }
                            </TableBody>
                        </Table>
                        } 
                        
                    </Div>

               

            </CardBody>
        </CardBody>
    </Card>

</Div>

@code {
    Validations validations;
    IEnumerable<TblDeptMaster> departments;
    IEnumerable<TblSubDeptMaster> subDepts;
    IEnumerable<LogbookMaster> logbooks;
    IEnumerable<TblLogbookDetailSchemasMD> logbookdetail;
    IEnumerable<TblLogbookDetailSchema> logdtschema;
    IEnumerable<TblLogBookDataTable> logData;
    IEnumerable<TblShiftMaster> shiftdata;
    IEnumerable<lookup> looklist;
    DataTable datareport;
    List<ElementList> dynamicform = new();
    string cmpId;
    string plantId;
    string checkdynamicbool;
    Formdata formdatas = new();
    List<LogData> logdatatable = new();
    LogDataList logdtList = new ();
    DateTime? selectDate;
    DateTime? CurrentDate;
    // TimeSpan? CurrentTime;
    bool collapse1Visible = true;
    bool Displaydynamic = false;
    bool inactive = false;
    bool iscorrect = true;
    ElementList ele;
    List<DataTable> dts = new List<DataTable>();
    LogData logdata = new();
    protected override async Task OnInitializedAsync()
    {
        CurrentDate=DateTime.Now;
        departments = await httpservices.Get<List<TblDeptMaster>>("DeptMasters/ACT");
        logdtschema = await httpservices.Get<List<TblLogbookDetailSchema>>("LogbookDetailSchemas");

        StateHasChanged();

    }
    async void handleformgroup(string value)
    {
        collapse1Visible = true;
        formdatas.Department = value;

        subDepts = (await httpservices.Get<List<TblSubDeptMaster>>("SubDeptMasters/ACT")).Where(a=>(a.Dept_Id==formdatas.Department));

        StateHasChanged();
    }
    async void handleforms(string value)
    {
        collapse1Visible = true;
        formdatas.SubDepartment = value;

        logbooks = (await httpservices.Get<List<LogbookMaster>>("LogbookMasters/ACT")).Where(a => (a.SubDepartment == formdatas.SubDepartment));
        string cmp = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).Company_Id;
        shiftdata = await httpservices.Get<List<TblShiftMaster>>("ShiftMasters/" + cmp + "/" + CurrentDate?.ToString("MM-dd-yyyy HH:mm:ss"));
        StateHasChanged();
    }
    async void handlelog(string value)
    {
        collapse1Visible=true;
        formdatas.logbook = value;
        StateHasChanged();
    }
    async void Submit()
    {

        try
        {
            dynamicform = new List<ElementList>();
            dts = new();
            logbookdetail = await httpservices.Get<List<TblLogbookDetailSchemasMD>>("LogbookDetailSchemas/ACT/" + formdatas.logbook);

            //formdatas.Date = Convert.ToDateTime(time.ToString().Replace("00-00-0000", CurrentDate?.ToString("MM-dd-yyyy")));

            if (logbookdetail.Count() == 0)
            {
                await App.Current.MainPage.DisplayAlert("Dynamic Form", "Sorry there is no elements in the form", "OK");
            }
            else
            {
                logbookdetail.ToList().ForEach(async a =>
                {
                    ElementList ele = new ElementList { Label = a.Display_Name, Sequence = a.Seq, ElementType = a.DataType, IsMandatory = a.isMandatory,isOther= a.isOther, LookupValue= a.Value_Schema};
                    if (a.Value_Schema != null)
                    {
                        ele.lookuplist = await httpservices.Get<List<LookupData>>("LookupData/" + a.Text_Schema + "/" + a.Value_Schema);
                        //if(ele.Label=="Lookup")
                        //{
                        //    ele.Label = logbookdetail.First(a => (a.LookupId == ele.LookupId)).LogbookName;
                        //}
                    }
                    dynamicform.Add(ele);


                });
                Displaydynamic = true;
            }
            collapse1Visible = false;
            datareport = await httpservices.GetDataTable("LogDataTable/" + formdatas.logbook + "/" + formdatas.Date?.ToString("yyyy-MM-dd HH:mm:ss"));
            if(datareport!=null)
            {
                var datare = from rows in datareport.AsEnumerable()
                             group rows by new { Shift = rows["Shift_prefix"] }
                 into grp
                             select grp;

                foreach (var item in datare)
                {
                    dts.Add(item.CopyToDataTable());
                }
            }

            StateHasChanged();

        }
        catch(Exception ex)
        {

        }
    }
    async Task submit()
    {
        try
        {

            if (await validations.ValidateAll())
            {

                var a = dynamicform;
                logdatatable = new();
                a.ForEach(a =>
                {
                    LogData logdata = new();
                    logdata.Uom = logdtschema.First(a => (a.LogbookId == formdatas.logbook)).UOM;
                    logdata.SubDeptId = formdatas.SubDepartment;
                    logdata.DeptId = formdatas.Department;
                    if (a.ElementType == "Text")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.StringValue;
                    }
                    else if (a.ElementType == "Number")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.IntegerValue.ToString();
                    }
                    else if (a.ElementType == "Date")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.DateOnlyValue?.ToString("MM-dd-yyyy");
                    }
                    else if (a.ElementType == "DateTime")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.DateValue?.ToString("MM-dd-yyyy HH:mm:ss");
                    }
                    else if (a.ElementType == "Time")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.TimeValue?.ToString("HH:mm:ss");
                    }
                    else if (a.ElementType == "Boolean")
                    {
                        logdata.ParamName = a.Label;
                        // a.StringValue = Convert.ToBoolean(checkdynamicbool);
                        logdata.Val = a.StringValue.ToString();
                    }
                    else if (a.ElementType == "Lookup")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.LookupValue;
                    }
                    logdata.CompanyId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).Company_Id;
                    logdata.PlantId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).Plant_Id;
                    logdata.Shift = formdatas.Shift;
                    logdata.LogbookId = formdatas.logbook;
                    logdata.MarkforDeletion = "0";  

                    logdatatable.Add(logdata);

                });
                logdtList.TblLog = logdatatable;
                logdtList.TblLogHead = new();
                logdtList.TblLogHead.CompanyId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).Company_Id;
                logdtList.TblLogHead.PlantId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).Plant_Id;
                logdtList.TblLogHead.Shift = formdatas.Shift;
                logdtList.TblLogHead.LogbookId = formdatas.logbook; 
                logdtList.TblLogHead.DeptId = formdatas.Department; 
                logdtList.TblLogHead.SubDeptId = formdatas.SubDepartment; 
                logdtList.TblLogHead.date = Convert.ToDateTime(formdatas.Date?.ToString("yyyy-MM-ddTHH:mm:ss"));
                logdtList.TblLogHead.CreatedBy = "Admin";
                logdtList.TblLogHead.StatusF = 0;
                inactive = true;
                var result = await httpservices.Post<string>("LogDataTable", logdtList);
                if (result != null)
                {
                    
                    await App.Current.MainPage.DisplayAlert("Message", "Success", "ok");
                    inactive = false;
                    StateHasChanged();
                }
                else
                {
                    await App.Current.MainPage.DisplayAlert("Error", "Error", "ok");
                }

                dynamicform = new();
                logdtList = new();
                Submit();
                StateHasChanged();
            }
        }
        catch(Exception ex)
        {

        }

    }

    async void handleshift(DateTime? date)
    {

        try
        {
            CurrentDate = date;
            formdatas.Date = CurrentDate;
            //formdatas.Date = Convert.ToDateTime(time.ToString().Replace("00-00-0000", CurrentDate?.ToString("MM-dd-yyyy")));
            string cmp = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).Company_Id;
            shiftdata = await httpservices.Get<List<TblShiftMaster>>("ShiftMasters/" + cmp + "/" + formdatas.Date?.ToString("yyyy-MM-dd HH:mm:ss"));
            StateHasChanged();
        }
        catch(Exception ex)
        {

        }

    }
    async Task savedraft()
    {
        try
        {
            if (await validations.ValidateAll())
            {
                var a = dynamicform;
                logdatatable = new();
                a.ForEach(a =>
                {
                    LogData logdata = new();
                    logdata.Uom = logdtschema.First(a => (a.LogbookId == formdatas.logbook)).UOM;
                    logdata.SubDeptId = formdatas.SubDepartment;
                    logdata.DeptId = formdatas.Department;
                    if (a.ElementType == "Text")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.StringValue;
                    }
                    else if (a.ElementType == "Number")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.IntegerValue.ToString();
                    }
                    else if (a.ElementType == "Date")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.DateOnlyValue?.ToString("dd-MM-yyyy");
                    }
                    else if (a.ElementType == "DateTime")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.DateValue?.ToString("dd-MM-yyyy HH:mm:ss");
                    }
                    else if (a.ElementType == "Time")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.TimeValue?.ToString("HH:mm:ss");
                    }
                    else if (a.ElementType == "Boolean")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.StringValue.ToString();
                    }
                    else if (a.ElementType == "Lookup")
                    {
                        logdata.ParamName = a.Label;
                        if(a.LookupValue == "Other")
                        {
                            logdata.Val = a.StringValue.ToString();
                        }
                        else
                            logdata.Val = a.LookupValue;

                    }
                    logdata.CompanyId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).Company_Id;
                    logdata.PlantId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).Plant_Id;
                    logdata.Shift = formdatas.Shift;
                    logdata.LogbookId = formdatas.logbook;
                    logdata.MarkforDeletion = "3";
                    logdatatable.Add(logdata);

                });
                logdtList.TblLog = logdatatable;
                logdtList.TblLogHead = new();
                logdtList.TblLogHead.CompanyId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).Company_Id;
                logdtList.TblLogHead.PlantId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).Plant_Id;
                logdtList.TblLogHead.Shift = formdatas.Shift;
                logdtList.TblLogHead.LogbookId = formdatas.logbook;
                logdtList.TblLogHead.DeptId = formdatas.Department;
                logdtList.TblLogHead.SubDeptId = formdatas.SubDepartment;
                logdtList.TblLogHead.date = Convert.ToDateTime(formdatas.Date?.ToString("yyyy-MM-ddTHH:mm:ss"));
                logdtList.TblLogHead.CreatedBy = "Admin";
                logdtList.TblLogHead.StatusF = 3;

                var result = await httpservices.Post<string>("LogDataTable", logdtList);
                if (result != null)
                {
                    inactive = true;
                    await App.Current.MainPage.DisplayAlert("Message", "Success", "ok");
                    inactive = false;
                    StateHasChanged();

                }
                else
                {
                    await App.Current.MainPage.DisplayAlert("Error", "Error", "ok");
                }

                dynamicform = new();
                logdtList = new();
                Submit();
                //Displaydynamic = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

        }
    }

    void Onchecked(string value)
    {
        checkdynamicbool = value;

    }

    void ValidateEmail(ValidatorEventArgs e)
    {
        var email = Convert.ToString(e.Value);

        e.Status = string.IsNullOrEmpty(email) ? ValidationStatus.None :
            email.Contains("@") ? ValidationStatus.Success : ValidationStatus.Error;
    }

    void handleitem(DataRow val)
    {
        Displaydynamic = true;

        DataTable dt = datareport.AsEnumerable().Where(a => a.Field<string>("header_Id") == val[1]).CopyToDataTable();

        foreach(DataRow dr in dt.Rows)
        {
            foreach(DataColumn dc in dt.Columns)
            {

                dynamicform.ForEach(a =>
                {
                    a.HeaderId = dr["header_Id"].ToString();
                    a.Shift_prefix = dr["Shift_prefix"].ToString();
                    if(a.Label.ToUpper()==dc.ColumnName.ToString().ToUpper())
                    {
                        if (a.ElementType == "Text")
                        {
                            if(!string.IsNullOrEmpty(dr[dc.ColumnName].ToString()))
                            {
                                a.StringValue = dr[dc.ColumnName].ToString();
                            }

                        }
                        else if (a.ElementType == "Number")
                        {
                            if(!string.IsNullOrEmpty(dr[dc.ColumnName].ToString()))
                            {
                                a.IntegerValue = Convert.ToInt32(dr[dc.ColumnName]);
                            }

                        }
                        else if (a.ElementType == "Date")
                        {
                            if(!string.IsNullOrEmpty(dr[dc.ColumnName].ToString()))
                            {
                                DateTime d1 = Convert.ToDateTime(dr[dc.ColumnName].ToString());
                                a.DateOnlyValue = d1.Date;
                            }

                        }
                        else if (a.ElementType == "DateTime")
                        {
                            if (!string.IsNullOrEmpty(dr[dc.ColumnName].ToString()))
                            {

                                a.DateValue = Convert.ToDateTime(dr[dc.ColumnName]);
                            }
                        }
                        else if (a.ElementType == "Boolean")
                        {
                            if (!string.IsNullOrEmpty(dr[dc.ColumnName].ToString()))
                            {
                                a.StringValue = (dr[dc.ColumnName]).ToString();
                            }

                        }
                        else if(a.ElementType=="Time")
                        {
                            if (!string.IsNullOrEmpty(dr[dc.ColumnName].ToString()))
                            {
                                DateTime d = Convert.ToDateTime(dr[dc.ColumnName]);
                                a.TimeValue = d;

                            }
                        }


                    }

                });
            }
        }
        StateHasChanged();
    }
    void handlevalue(string val)
    {
        if(val == "Other")
        {
            dynamicform.ForEach(a =>{
                a.LookupValue = val;
            });
            iscorrect = false;
        }
        else
        {
           dynamicform.ForEach(a =>{
                a.LookupValue = val;
            });
            iscorrect = true; 
        } 

       
    }

}