@page "/DynamicForm"
@using AONLOGBOOK.SHARED.Models;
@using AONLOGBOOK.SHARED.CModels;
@using AONLOGBOOK.MAUI.Models;
@inject IHttpService httpservices

<style>
    body {
        background: #F6F5F5;
    }

    .Card {
        border: 1px solid #1616424a;
        border-radius: 15px;
        box-shadow: 0px 0px 2px 2px #bdcfdd;
       
        transition:ease-in-out 5s;
    }
</style>

<Div Class="container p-2">
@*    <Heading Size="HeadingSize.Is4" Flex="Flex.JustifyContent.Center" Margin="Margin.Is4">LOGBOOK</Heading>
*@   

  <Accordion>
    <Collapse Visible="@collapse1Visible">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is6">
                    <AccordionToggle><BarIcon IconName="IconName.AngleDown"></BarIcon>LOGBOOK</AccordionToggle>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            <EditForm Model="@formdatas" OnValidSubmit="Submit">

                <Validations @ref="validations" Mode="ValidationMode.Manual">
                    <Fields>

                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>Department</FieldLabel>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <Select SelectedValue="@formdatas.Department" SelectedValueExpression="@(()=>formdatas.Department)" SelectedValueChanged="@((string args)=>{handleformgroup(args);})">
                                    <SelectItem>--Select--</SelectItem>
                                    @if (departments != null)
                                    {
                                        @foreach (TblDeptMaster dept in departments)
                                        {
                                            <SelectItem Value="@dept.Id">@dept.DeptName</SelectItem>
                                        }
                                    }

                                </Select>
                            </Validation>
                        </Field>
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>SubDepartment</FieldLabel>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <Select SelectedValue="@formdatas.SubDepartment" SelectedValueExpression="@(()=>formdatas.SubDepartment)" SelectedValueChanged="@((string agrs)=>{handleforms(agrs);})">
                                    <SelectItem>--Select--</SelectItem>
                                    @if (subDepts != null)
                                    {
                                        @foreach (TblSubDeptMaster sub in subDepts)
                                        {
                                            <SelectItem Value="@sub.Id">@sub.SubDptName</SelectItem>
                                        }
                                    }
                                </Select>
                            </Validation>
                        </Field>
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                            <FieldLabel>Logbook</FieldLabel>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <Select SelectedValue="@formdatas.logbook" SelectedValueExpression="@(()=>formdatas.logbook)" SelectedValueChanged="@((string args)=>{handlelog(args);})">
                                    <SelectItem>--Select--</SelectItem>
                                    @if (logbooks != null)
                                    {
                                        @foreach (LogbookMaster log in logbooks)
                                        {
                                            <SelectItem Value="@log.LogbookId">@log.LogbookName</SelectItem>
                                        }
                                    }

                                </Select>
                            </Validation>
                        </Field>
                            <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                                <FieldLabel>Date</FieldLabel>
                                <Validation Validator="ValidationRule.IsNotEmpty">
                                <TextEdit  @bind-Text="@CurrentDate" TValue="string" Disabled />
                                </Validation>
                            </Field>
                            <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                                <FieldLabel>Time</FieldLabel>
                                <Validation Validator="ValidationRule.IsNotEmpty">
                                    @* <DateEdit InputMode="DateInputMode.DateTime" Date="formdatas.Date.ToString()" TValue="string"
                                    DateExpression="@(()=>formdatas.Date.ToString())" DateChanged="@((string arg)=>{handleshift(arg);})"></DateEdit>*@
                                    <TimeEdit Time="@formdatas.Date" TValue="DateTime?" TimeChanged="@handleshift" />
                                </Validation>
                            </Field>
                            <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                                <FieldLabel>Shift</FieldLabel>
                                <Validation Validator="ValidationRule.IsNotEmpty">
                                   <Select @bind-SelectedValue="formdatas.Shift" TValue="string">
                                       <SelectItem>--Select--</SelectItem>
                                       @if(shiftdata!=null)
                                        {
                                            @foreach (TblShiftMaster shift in shiftdata)
                                            {
                                                <SelectItem Value="@shift.Id">@shift.ShiftPrefix</SelectItem>
                                            }
                                        }
                                        
                                     

                                   </Select>
                                </Validation>
                            </Field>
                            
                      

                    </Fields>
                        <Field Flex="Flex.JustifyContent.End.OnDesktop.JustifyContent.Center.OnMobile">
                            <Button Clicked="Submit" style="margin-top:10px;background:#659abb;color:#000;" Disabled=@(formdatas.Department==null||formdatas.SubDepartment==null||formdatas.logbook==null)>Generate Form</Button>
                        </Field>
                </Validations>
            </EditForm>
        </CollapseBody>
    </Collapse>
</Accordion>
    <Divider DividerType="DividerType.Dashed" />
   
    @if (dynamicform.Count() > 0)
    {
@*        <Validations @ref="validations" Mode="ValidationMode.Manual">
*@            <Card Margin="Margin.Is4.OnY" Background="Background.Transparent" Class="Card">
                <CardHeader Style="background:linear-gradient(180deg, rgb(170 196 224 / 50%), transparent); color:#11324D;border-radius:15px;">
                    <h4>@logbooks.First().LogbookName</h4>
                </CardHeader>
                <CardBody>
                    <CardText>
                        <Field>
                            @foreach (ElementList ele in dynamicform)
                            {
                                @if (ele.ElementType == "Text")
                                {
                                    <FieldLabel>@ele.Label</FieldLabel>
                                    @if(ele.Label=="Email")
                                    {
                                        @if(ele.IsMandatory==1)
                                        {
                                        <Validations @ref="validations" Mode="ValidationMode.Manual">
                                            <Validation Validator="ValidationRule.IsNotEmpty">
                                                <TextEdit @bind-Text="@ele.StringValue" Style="margin:auto;" InputMode="TextInputMode.Email"></TextEdit>
                                            </Validation>
                                        </Validations>
                                        }
                                        else
                                        {
                                            <TextEdit @bind-Text="@ele.StringValue" Style="margin:auto;" InputMode="TextInputMode.Email"></TextEdit>
                                        }
                                    }else
                                    {
                                        @if (ele.IsMandatory == 1)
                                        {
                                            <Validations @ref="validations" Mode="ValidationMode.Manual">
                                            <Validation Validator="ValidationRule.IsNotEmpty">
                                                <TextEdit @bind-Text="@ele.StringValue" Style="margin:auto;"></TextEdit>
                                            </Validation>
                                            </Validations>
                                        }
                                        else
                                        {
                                            <TextEdit @bind-Text="@ele.StringValue" Style="margin:auto;"></TextEdit>
                                        }
                                    }

                                }
                                else if (ele.ElementType == "Number")
                                {
                                    <FieldLabel>@ele.Label</FieldLabel>
                                    @if (ele.IsMandatory == 1)
                                    {
                                        <Validations @ref="validations" Mode="ValidationMode.Manual">
                                        <Validation Validator="ValidationRule.None">
                                            <NumericEdit @bind-Value="ele.IntegerValue" Style="margin:auto;"></NumericEdit>
                                        </Validation>
                                        </Validations>
                                    }
                                    else
                                    {
                                        <NumericEdit @bind-Value="ele.IntegerValue" Style="margin:auto;"></NumericEdit>
                                    }
                                }
                                else if (ele.ElementType == "Date")
                                {
                                    <FieldLabel>@ele.Label</FieldLabel>
                                    @if (ele.IsMandatory == 1)
                                    {
                                        <Validations @ref="validations" Mode="ValidationMode.Manual">
                                            <Validation Validator="ValidationRule.IsNotEmpty">
                                                <DateEdit @bind-Date="ele.DateOnlyValue" InputMode="DateInputMode.Date"></DateEdit>
                                            </Validation>
                                        </Validations>
                                    }
                                    else
                                    {
                                        <DateEdit @bind-Date="ele.DateOnlyValue" InputMode="DateInputMode.Date"></DateEdit>
                                    }
                                }
                                else if (ele.ElementType == "Time")
                                {
                                    <FieldLabel>@ele.Label</FieldLabel>
                                    @if (ele.IsMandatory == 1)
                                    {
                                        <Validations @ref="validations" Mode="ValidationMode.Manual">
                                            <Validation Validator="ValidationRule.IsNotEmpty">
                                                <TimeEdit @bind-Time="ele.TimeValue" TValue="TimeSpan?"></TimeEdit>
                                            </Validation>
                                        </Validations>
                                    }
                                    else
                                    {
                                       <TimeEdit @bind-Time="ele.TimeValue" TValue="TimeSpan?"></TimeEdit>
                                    }
                                }
                                else if (ele.ElementType == "DateTime")
                                {
                                    <FieldLabel>@ele.Label</FieldLabel>
                                     @if (ele.IsMandatory == 1)
                                    { <Validations @ref="validations" Mode="ValidationMode.Manual">
                                        <Validation Validator="ValidationRule.None">
                                            <DateEdit @bind-Date="ele.DateValue" Style="margin:auto;"></DateEdit>
                                        </Validation>
                                        </Validations>
                                    }
                                    else
                                    {
                                        <DateEdit @bind-Date="ele.DateValue" Style="margin:auto;"></DateEdit>
                                    }
                                }
                                else if (ele.ElementType == "Boolean")
                                {
                                    <FieldLabel>@ele.Label</FieldLabel>
                                    @if (ele.IsMandatory == 1)
                                    {<Validations @ref="validations" Mode="ValidationMode.Manual">
                                        <Validation Validator="ValidationRule.IsChecked">
                                            <RadioGroup TValue="string" Name="Rgrp" CheckedValue="@checkdynamicbool" CheckedValueChanged="@Onchecked">
                                            <Radio Group="Rgrp">Yes</Radio>
                                            <Radio Group="Rgrp">No</Radio>
                                        </RadioGroup>
                                        </Validation>
                                        </Validations>
                                    }
                                    else
                                    {
                                        <RadioGroup TValue="string" Name="Rgrp" CheckedValue="@checkdynamicbool" CheckedValueChanged="@Onchecked">
                                            <Radio  Group="Rgrp">Yes</Radio>
                                            <Radio  Group="Rgrp">No</Radio>
                                        </RadioGroup>
                                    }
                                }

                        }
                            <Field Flex="Flex.JustifyContent.End.OnDesktop.JustifyContent.Center.OnMobile">
                                <Button Clicked="@submit" Style="justify-content:center; margin:15px;background:#659abb;color:#000;">Save</Button>
                                <Button Clicked="@savedraft" Style="justify-content:center; margin:15px;background:#659abb;color:#000;">Save Draft</Button>
                            </Field>

                        </Field>

                    </CardText>

                </CardBody>
            </Card>

       @* </Validations>*@
    }
    <Card>
        <CardBody>
            <CardTitle>
                report
            </CardTitle>
            <CardText>
                @if (datareport != null)
                {
                    @foreach (LogDataReport item in datareport)
                    {
                        <p>
                            sl: @item.Sl<br />
                            Shift : @item.ShiftPrefix<br />
                            Param Name: @item.ParamName<br/>
                            Value: @item.Value<br />
                             Unit : @item.Unit <br />
                        </p>
                    }
                }
            </CardText>
        </CardBody>
    </Card>

</Div>

@code {
    Validations validations;
    IEnumerable<TblDeptMaster> departments;
    IEnumerable<TblSubDeptMaster> subDepts;
    IEnumerable<LogbookMaster> logbooks;
    IEnumerable<TblLogbookDetailSchemaMOD> logbookdetail;
    IEnumerable<TblLogbookDetailSchema> logdtschema;
    IEnumerable<TblLogBookDataTable> logData;
    IEnumerable<TblShiftMaster> shiftdata;
    IEnumerable<LogDataReport> datareport;
    List<ElementList> dynamicform = new();
    string cmpId;
    string plantId;
    string checkdynamicbool;
    Formdata formdatas = new();
    List<LogData> logdatatable = new();
    LogDataList logdtList = new ();
    DateTime? selectDate;
    string? CurrentDate;
    bool collapse1Visible = true;

    protected override async Task OnInitializedAsync()
    {
        //formdatas.Date = DateTime.Now;
        CurrentDate = DateTime.Now.ToString("MM-dd-yyyy");
        departments = await httpservices.Get<List<TblDeptMaster>>("DeptMasters");
        logdtschema = await httpservices.Get<List<TblLogbookDetailSchema>>("LogbookDetailSchemas");
        StateHasChanged();
    }
    async void handleformgroup(string value)
    {
        collapse1Visible = true;
        formdatas.Department = value;
        Console.WriteLine(value);
        subDepts = await httpservices.Get<List<TblSubDeptMaster>>("SubDeptMasters/" + formdatas.Department);

        StateHasChanged();
    }
    async void handleforms(string value)
    {
        collapse1Visible = true;
        formdatas.SubDepartment = value;
        Console.WriteLine(value);

        logbooks = await httpservices.Get<List<LogbookMaster>>("LogbookMasters/" + formdatas.SubDepartment);
        //string cmp = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).CompanyId;
        //shiftdata = await httpservices.Get<List<TblShiftMaster>>("ShiftMasters/" + cmp + "/" + formdatas.Date?.ToString("MM-dd-yyyy HH:mm:ss"));
        StateHasChanged();
    }
    async void handlelog(string value)
    {
        collapse1Visible=true;
        formdatas.logbook = value;

    }
    async void Submit()
    {
        try
        {
            dynamicform = new List<ElementList>();
            logdatatable = new();
            logbookdetail = await httpservices.Get<List<TblLogbookDetailSchemaMOD>>("LogbookDetailSchemas/" + formdatas.logbook);
            if (logbookdetail.Count() == 0)
            {
                await App.Current.MainPage.DisplayAlert("Dynamic Form", "Sorry there is no elements in the form", "OK");
            }
            else
            {
                logbookdetail.ToList().ForEach(a =>
             {
                 dynamicform.Add(new ElementList { Label = a.displayname, Sequence = a.Seq, ElementType = a.DataType ,IsMandatory=a.IsMandatory });
             });
            }
            collapse1Visible = false;
            //datareport = await httpservices.Get<List<LogDataReport>>("LogBookDataTables/" + formdatas.logbook + "/" + formdatas.Date?.ToString("yyyy-MM-dd HH:mm:ss"));


            StateHasChanged();

        }
        catch(Exception ex)
        {

        }
    }
    async Task submit()
    {
        try
        {
            if (await validations.ValidateAll())
            {
                var a = dynamicform;
                a.ForEach(a =>
                {
                    LogData logdata = new();
                    logdata.Uom = logdtschema.First(a => (a.LogbookId == formdatas.logbook)).Uom;
                    logdata.SubDeptId = formdatas.SubDepartment;
                    logdata.DeptId = formdatas.Department;
                    if (a.ElementType == "Text")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.StringValue;
                    }
                    else if (a.ElementType == "Number")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.IntegerValue.ToString();
                    }
                    else if (a.ElementType == "Date")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.DateOnlyValue?.ToString("MM-dd-yyyy");
                    }
                    else if (a.ElementType == "DateTime")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.DateValue?.ToString("MM-dd-yyyy HH:mm:ss");
                    }
                    else if (a.ElementType == "Time")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.TimeValue?.ToString("HH:mm:ss");
                    }
                    else if (a.ElementType == "Boolean")
                    {
                        logdata.ParamName = a.Label;
                        a.BoolValue = Convert.ToBoolean(checkdynamicbool);
                        logdata.Val = a.BoolValue.ToString();
                    }

                    logdata.CompanyId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).CompanyId;
                    logdata.PlantId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).PlantId;
                    logdata.Shift = formdatas.Shift;
                    logdata.LogbookId = formdatas.logbook;
                    logdata.MarkforDeletion = "0";  

                    logdatatable.Add(logdata);

                });
                logdtList.TblLog = logdatatable;
                logdtList.TblLogHead = new();
                logdtList.TblLogHead.CompanyId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).CompanyId;
                logdtList.TblLogHead.PlantId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).PlantId;
                logdtList.TblLogHead.Shift = formdatas.Shift;
                logdtList.TblLogHead.LogbookId = formdatas.logbook; 
                logdtList.TblLogHead.DeptId = formdatas.Department; 
                logdtList.TblLogHead.SubDeptId = formdatas.SubDepartment; 
                logdtList.TblLogHead.date = Convert.ToDateTime(formdatas.Date?.ToString("yyyy-MM-ddTHH:mm:ss"));
                logdtList.TblLogHead.CreatedBy = "Admin";
                logdtList.TblLogHead.StatusF = 0;

                var result = await httpservices.Post<string>("LogBookDataTableHeaders", logdtList);
                if (result != null)
                {
                    await App.Current.MainPage.DisplayAlert("Message", "Success", "ok");

                }
                else
                {
                    await App.Current.MainPage.DisplayAlert("Error", "Error", "ok");
                }
                logdtList = new();
                dynamicform = new();
                StateHasChanged();
            }
        }
        catch(Exception ex)
        {

        }

    }

    async void handleshift(DateTime? time)
    {

        try
        {
            formdatas.Date = Convert.ToDateTime(time.ToString().Replace("00-00-0000", CurrentDate));
            string cmp = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).CompanyId;
            shiftdata = await httpservices.Get<List<TblShiftMaster>>("ShiftMasters/" + cmp + "/" + formdatas.Date?.ToString("MM-dd-yyyy HH:mm:ss"));
            StateHasChanged();
        }
        catch(Exception ex)
        {

        }

    }
    async Task savedraft()
    {
        try
        {
            if (await validations.ValidateAll())
            {
                var a = dynamicform;
                a.ForEach(a =>
                {
                    LogData logdata = new();
                    logdata.Uom = logdtschema.First(a => (a.LogbookId == formdatas.logbook)).Uom;
                    logdata.SubDeptId = formdatas.SubDepartment;
                    logdata.DeptId = formdatas.Department;
                    if (a.ElementType == "Text")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.StringValue;
                    }
                    else if (a.ElementType == "Number")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.IntegerValue.ToString();
                    }
                    else if (a.ElementType == "Date")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.DateValue?.ToString("MM-dd-yyyy");
                    }
                    else if (a.ElementType == "DateTime")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.DateValue?.ToString("MM-dd-yyyy HH:mm:ss");
                    }
                    else if (a.ElementType == "Time")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.DateValue?.ToString("HH.mm.ss");
                    }
                    else if (a.ElementType == "Boolean")
                    {
                        logdata.ParamName = a.Label;
                        logdata.Val = a.BoolValue.ToString();
                    }

                    logdata.CompanyId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).CompanyId;
                    logdata.PlantId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).PlantId;
                    logdata.Shift = formdatas.Shift;
                    logdata.LogbookId = formdatas.logbook;
                    logdata.MarkforDeletion = "3";
                    logdatatable.Add(logdata);

                });
                logdtList.TblLog = logdatatable;
                logdtList.TblLogHead = new();
                logdtList.TblLogHead.CompanyId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).CompanyId;
                logdtList.TblLogHead.PlantId = subDepts.First(a => (a.Id.ToString() == formdatas.SubDepartment)).PlantId;
                logdtList.TblLogHead.Shift = formdatas.Shift;
                logdtList.TblLogHead.LogbookId = formdatas.logbook;
                logdtList.TblLogHead.DeptId = formdatas.Department;
                logdtList.TblLogHead.SubDeptId = formdatas.SubDepartment;
                logdtList.TblLogHead.date = Convert.ToDateTime(formdatas.Date?.ToString("yyyy-MM-ddTHH:mm:ss"));
                logdtList.TblLogHead.CreatedBy = "Admin";
                logdtList.TblLogHead.StatusF = 3;

                var result = await httpservices.Post<string>("LogBookDataTableHeaders", logdtList);
                if (result != null)
                {
                    await App.Current.MainPage.DisplayAlert("Message", "Success", "ok");

                }
                else
                {
                    await App.Current.MainPage.DisplayAlert("Error", "Error", "ok");
                }
                logdtList = new();
                dynamicform = new();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

        }
    }

    void Onchecked(string value)
    {
        checkdynamicbool = value;
        
    }

   
}